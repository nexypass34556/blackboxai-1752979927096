"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/supabase.ts":
/*!*****************************!*\
  !*** ./src/lib/supabase.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addWinner: function() { return /* binding */ addWinner; },\n/* harmony export */   canUserSpin: function() { return /* binding */ canUserSpin; },\n/* harmony export */   getCurrentUser: function() { return /* binding */ getCurrentUser; },\n/* harmony export */   getRecentWinners: function() { return /* binding */ getRecentWinners; },\n/* harmony export */   getUserInvitationStats: function() { return /* binding */ getUserInvitationStats; },\n/* harmony export */   getUserInvitations: function() { return /* binding */ getUserInvitations; },\n/* harmony export */   getUserProfile: function() { return /* binding */ getUserProfile; },\n/* harmony export */   processInvitationCode: function() { return /* binding */ processInvitationCode; },\n/* harmony export */   recordSpin: function() { return /* binding */ recordSpin; },\n/* harmony export */   resetDailySpins: function() { return /* binding */ resetDailySpins; },\n/* harmony export */   signOut: function() { return /* binding */ signOut; },\n/* harmony export */   supabase: function() { return /* binding */ supabase; },\n/* harmony export */   updateUserProfile: function() { return /* binding */ updateUserProfile; }\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\n// Función para crear un cliente mock cuando Supabase no está configurado\nconst createMockClient = ()=>{\n    const mockClient = {\n        auth: {\n            getUser: ()=>Promise.resolve({\n                    data: {\n                        user: null\n                    },\n                    error: null\n                }),\n            getSession: ()=>Promise.resolve({\n                    data: {\n                        session: null\n                    },\n                    error: null\n                }),\n            signUp: ()=>Promise.resolve({\n                    data: {\n                        user: null,\n                        session: null\n                    },\n                    error: {\n                        message: \"Supabase not configured\"\n                    }\n                }),\n            signInWithPassword: ()=>Promise.resolve({\n                    data: {\n                        user: null,\n                        session: null\n                    },\n                    error: {\n                        message: \"Supabase not configured\"\n                    }\n                }),\n            signOut: ()=>Promise.resolve({\n                    error: null\n                }),\n            onAuthStateChange: ()=>({\n                    data: {\n                        subscription: {\n                            unsubscribe: ()=>{}\n                        }\n                    }\n                })\n        },\n        from: ()=>({\n                select: ()=>({\n                        eq: ()=>({\n                                single: ()=>Promise.resolve({\n                                        data: null,\n                                        error: {\n                                            message: \"Supabase not configured\"\n                                        }\n                                    })\n                            })\n                    }),\n                insert: ()=>({\n                        select: ()=>({\n                                single: ()=>Promise.resolve({\n                                        data: null,\n                                        error: {\n                                            message: \"Supabase not configured\"\n                                        }\n                                    })\n                            })\n                    }),\n                update: ()=>({\n                        eq: ()=>({\n                                select: ()=>({\n                                        single: ()=>Promise.resolve({\n                                                data: null,\n                                                error: {\n                                                    message: \"Supabase not configured\"\n                                                }\n                                            })\n                                    })\n                            })\n                    }),\n                order: ()=>({\n                        limit: ()=>Promise.resolve({\n                                data: [],\n                                error: null\n                            })\n                    })\n            })\n    };\n    return mockClient;\n};\nconst supabaseUrl = \"https://ocjdvtjjindudvbnjqtc.supabase.co\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9jamR2dGpqaW5kdWR2Ym5qcXRjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI5NjEzODEsImV4cCI6MjA2ODUzNzM4MX0.2Jetf_e-ESGUv0VbvvNrDLrlQJjAM1TsSDSCIagnrwk\";\nlet supabase;\nif (supabaseUrl && supabaseAnonKey && supabaseUrl !== \"your_supabase_project_url_here\" && supabaseAnonKey !== \"your_supabase_anon_key_here\") {\n    supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n} else {\n    if (true) {\n        console.warn(\"⚠️ Supabase not configured. Using mock client. Please set NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY in .env.local\");\n    }\n    supabase = createMockClient();\n}\n\n// Funciones de utilidad para Supabase\nconst getCurrentUser = async ()=>{\n    const { data: { user } } = await supabase.auth.getUser();\n    return user;\n};\nconst signOut = async ()=>{\n    const { error } = await supabase.auth.signOut();\n    if (error) throw error;\n};\nconst getUserProfile = async (userId)=>{\n    const { data, error } = await supabase.from(\"profiles\").select(\"*\").eq(\"id\", userId).single();\n    if (error) throw error;\n    return data;\n};\nconst updateUserProfile = async (userId, updates)=>{\n    const { data, error } = await supabase.from(\"profiles\").update(updates).eq(\"id\", userId).select().single();\n    if (error) throw error;\n    return data;\n};\nconst canUserSpin = async (userId)=>{\n    const { data: profile, error } = await supabase.from(\"profiles\").select(\"spins_used_today, last_spin_at, bonus_spins\").eq(\"id\", userId).single();\n    if (error) throw error;\n    const now = new Date();\n    const lastSpin = profile.last_spin_at ? new Date(profile.last_spin_at) : null;\n    const spinsUsed = profile.spins_used_today || 0;\n    const bonusSpins = profile.bonus_spins || 0;\n    const totalAvailableSpins = 2 + bonusSpins;\n    // Verificar límite total (2 giros base + giros bonus)\n    if (spinsUsed >= totalAvailableSpins) {\n        return {\n            canSpin: false,\n            reason: \"Has usado todos tus giros disponibles (\".concat(totalAvailableSpins, \")\"),\n            nextSpinAt: null,\n            remainingSpins: 0,\n            bonusSpins: bonusSpins\n        };\n    }\n    // Verificar si han pasado 2 horas desde el último giro (solo si ya ha girado)\n    if (lastSpin && spinsUsed > 0) {\n        const timeDiff = now.getTime() - lastSpin.getTime();\n        const hoursDiff = timeDiff / (1000 * 60 * 60);\n        if (hoursDiff < 2) {\n            return {\n                canSpin: false,\n                reason: \"Debes esperar 2 horas entre giros. Giros restantes: \".concat(totalAvailableSpins - spinsUsed),\n                nextSpinAt: new Date(lastSpin.getTime() + 2 * 60 * 60 * 1000),\n                remainingSpins: totalAvailableSpins - spinsUsed,\n                bonusSpins: bonusSpins\n            };\n        }\n    }\n    return {\n        canSpin: true,\n        reason: null,\n        nextSpinAt: null,\n        remainingSpins: totalAvailableSpins - spinsUsed,\n        bonusSpins: bonusSpins\n    };\n};\nconst recordSpin = async (userId, prizeType, prizeLabel)=>{\n    // Primero obtener el perfil actual\n    const { data: profile, error: profileError } = await supabase.from(\"profiles\").select(\"spins_used_today, bonus_spins\").eq(\"id\", userId).single();\n    if (profileError) throw profileError;\n    const currentSpins = profile.spins_used_today || 0;\n    const bonusSpins = profile.bonus_spins || 0;\n    // Insertar el registro del giro\n    const { data, error } = await supabase.from(\"spins\").insert({\n        user_id: userId,\n        prize_type: prizeType,\n        prize_label: prizeLabel,\n        created_at: new Date().toISOString()\n    }).select().single();\n    if (error) throw error;\n    // Si se usó un giro bonus, reducir los bonus spins\n    let updateData = {\n        last_spin_at: new Date().toISOString(),\n        spins_used_today: currentSpins + 1\n    };\n    // Si ya usó los 2 giros base y está usando bonus\n    if (currentSpins >= 2 && bonusSpins > 0) {\n        updateData.bonus_spins = bonusSpins - 1;\n    }\n    // Actualizar el perfil del usuario\n    await supabase.from(\"profiles\").update(updateData).eq(\"id\", userId);\n    return data;\n};\nconst getRecentWinners = async function() {\n    let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;\n    const { data, error } = await supabase.from(\"winners\").select(\"\\n      *,\\n      profiles (\\n        username,\\n        avatar_url\\n      )\\n    \").order(\"created_at\", {\n        ascending: false\n    }).limit(limit);\n    if (error) throw error;\n    return data;\n};\nconst addWinner = async (userId, prizeType, prizeLabel)=>{\n    const { data, error } = await supabase.from(\"winners\").insert({\n        user_id: userId,\n        prize_type: prizeType,\n        prize_label: prizeLabel,\n        created_at: new Date().toISOString()\n    }).select().single();\n    if (error) throw error;\n    return data;\n};\n// Funciones para el sistema de invitaciones\nconst processInvitationCode = async (userId, invitationCode)=>{\n    const { data, error } = await supabase.rpc(\"process_invitation\", {\n        invitee_id: userId,\n        invitation_code_input: invitationCode\n    });\n    if (error) throw error;\n    return data;\n};\nconst getUserInvitationStats = async (userId)=>{\n    const { data, error } = await supabase.from(\"profiles\").select(\"invitation_code, total_invites, bonus_spins\").eq(\"id\", userId).single();\n    if (error) throw error;\n    return data;\n};\nconst getUserInvitations = async (userId)=>{\n    const { data, error } = await supabase.from(\"invitations\").select(\"\\n      *,\\n      profiles!invitations_invitee_id_fkey (\\n        username,\\n        created_at\\n      )\\n    \").eq(\"inviter_id\", userId).order(\"created_at\", {\n        ascending: false\n    });\n    if (error) throw error;\n    return data;\n};\nconst resetDailySpins = async ()=>{\n    // Esta función se puede llamar diariamente para resetear los giros\n    const { error } = await supabase.from(\"profiles\").update({\n        spins_used_today: 0\n    }).neq(\"id\", \"00000000-0000-0000-0000-000000000000\") // Actualizar todos\n    ;\n    if (error) throw error;\n    return true;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/supabase.ts\n"));

/***/ })

});